<?php

/**
 * @file
 * Contains az_content.module.
 */

use Drupal\az_groups\AzGroupQuery;
use Drupal\comment\Entity\Comment;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\Component\Utility\Random;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_theme().
 */
function az_content_theme() {
  return [
    'block_donate' => [
      'variables' => [
        'title' => NULL,
        'description' => NULL,
        'more_url' => NULL,
      ],
    ],
    'block_contribute' => [
      'variables' => [
        'title' => NULL,
        'description' => NULL,
        'more_url' => NULL,
      ],
    ],
  ];
}
/**
 * Implements hook_form_alter().
 */
function az_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
/*if ($form['#form_id'] == 'entity_embed_dialog') {
    $form['shitty'] = [
      '#type' => 'container',
      'checkbox' => [
        '#type' => 'checkbox',
        '#title' => t('hey james dude'),
        '#default_value' => false,
      ],
    ];
  } */
  return;
}

function az_content_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  $type = $node->getType();
  if (in_array($type, ['article', 'book', 'news'])) {
    $form['mailit'] = [
      '#type' => 'container',
      'checkbox' => [
        '#type' => 'checkbox',
        '#title' => t('Send email notification'),
        '#default_value' => false,
      ],
    ];
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = '_az_content_node_submit';
      }
    }
  }
}

function _az_content_node_submit(&$form, FormStateInterface &$form_state) {
  return;
}

function az_content_form_node_ticket_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $request = \Drupal::request();
  if ($request->query->has('group')) {
    $gid = $request->query->get('group');
    $group = \Drupal::entityTypeManager()->getStorage('group')->load($gid);
    $form['field_group']['widget'][0]['target_id']['#default_value'] = $group;
  }

  if ($request->query->has('node')) {
    $nid = $request->query->get('node');
    $node = is_numeric($nid) ? Node::load($nid) : NULL;
    $form['field_page']['widget'][0]['target_id']['#default_value'] = $node;
  }
}

/**
 * Implements hook_node_presave().
 */
function az_content_node_presave(Node $node) {
  if  ($node->getType() == 'article' || $node->getType() == 'book') {

    // If this page belongs to a book, and the book is in a group, create group content reference.
    if (5) {

    }

    // If there is a primary image add reference back to the page.
    if ($node->hasField('field_media')) {
      $mediaRef = $node->field_media;
      $value = $mediaRef->getValue();
      if (!empty($value[0])) {
        $media = \Drupal::entityManager()->getStorage('media')->load($value[0]['target_id']);
        if ($media != null) {
          _az_content_add_node_to_media($media, $node->id());
        }
      }
    }

    // Find media in body and create reference back to the page.
    $bodyValue = $node->get('body')->getValue();
    if (!empty($bodyValue[0])) {
      preg_match_all("/data-entity-uuid=\".*?\"/", $bodyValue[0]['value'], $matches);
      foreach($matches[0] as $match) {
        $uuid = explode('"', $match)[1];
        $media = \Drupal::entityManager()->loadEntityByUuid('media', $uuid);
        if ($media != null) {
          _az_content_add_node_to_media($media, $node->id());
        }
      }
    }
  }
  return;
}

/**
 * Implements HOOK_entity_presave().
 *
 */
function az_content_entity_presave(EntityInterface $entity) {
  return;
}

/**
 * Implement HOOK_comment_presave().
 *
 * @param \Drupal\comment\Entity\Comment $comment
 */
function az_content_comment_presave(Comment $comment) {
  $articleId = $comment->get('entity_id')->getValue()[0]['target_id'];
  $bodyRef = $comment->get('comment_body');
  $bodyValue = $bodyRef->getValue();
  if (!empty($bodyValue[0])) {
    preg_match_all("/data-entity-uuid=\".*?\"/", $bodyValue[0]['value'], $matches);
    foreach($matches[0] as $match) {
      $uuid = explode('"', $match)[1];
      $media = \Drupal::entityManager()->loadEntityByUuid('media', $uuid);
      _az_content_add_node_to_media($media, $articleId);
    }
  }
  return;
}

/**
 * Implements HOOK_media_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function az_content_media_presave(EntityInterface $entity) {
  return;
}

/**
 * Implements HOOK_file_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function az_content_file_presave(EntityInterface $entity) {
  return;
}

/**
 * Implements HOOK_preprocess_comment().
 * @param $variables
 */
function az_content_preprocess_comment(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  return;
}

/**
 * Implements HOOK_preprocess_page().
 *
 * If this is the structuredatom.com and the user is not logged in then redirect
 * to the /under-construction.
 *
 * @param $variables
 */
function az_content_preprocess_page(&$variables) {

  if ($_SERVER['HTTP_HOST'] == 'atom' ||
      $_SERVER['HTTP_HOST'] == 'structuredatom.org' ||
      $_SERVER['HTTP_HOST'] == 'structuredatom.com') {
    if (\Drupal::currentUser()->isAnonymous() &&
        strstr($_SERVER['REQUEST_URI'], 'under-construction') == null  &&
        strstr($_SERVER['REQUEST_URI'], 'user/login') == null  &&
        strstr($_SERVER['REQUEST_URI'], 'user/password') == null) {
      drupal_set_message(t('The Structured Atom site is currently under construction ...'), 'status', TRUE);
      $response = new RedirectResponse('/under-construction');
      $response->send();
    }
  }
  return;
}

/**
 * Add a node reference to the media entity field_usage field.
 *
 * @param $media
 * @param $articleId
 */
function _az_content_add_node_to_media($media, $articleId) {
  $articles = $media->get('field_usage');
  $found = false;
  if (!empty($articles)) {
    $values = $articles->getValue();
    foreach ($values as $value) {
      if ($value['target_id'] == $articleId) {
        $found = TRUE;
      }
    }
  }
  if (!$found) {
    $media->field_usage->appendItem($articleId);
    $media->save();
  }
}

/**
 * Implements HOOK_preprocess_block().
 *
 * @param $variables
 */
function az_content_preprocess_block(&$variables) {
  switch ($variables['plugin_id']) {
    case 'az_top_nav_block':
      $snippet = \Drupal::entityManager()->getStorage('node')->load(377);
      $build = \Drupal::entityTypeManager()->getViewBuilder('node')->view($snippet, 'full');
      $variables['logo_popup'] = [
        '#type' => 'container',
        '#attributes' => ['class' => ['popup']],
        'contents' => $build,
      ];
      break;
  }
  return;
}

function az_content_wrap_block($title, $block) {
  return [
    '#type' => 'container',
    '#attributes' => ['class' => ['block-sidebar']],
    'title' => [
      '#type' => 'container',
      '#attributes' => ['class' => ['title-container']],
      'markup' => ['#markup' => '<h2>' . $title . '</h2>'],
    ],
    'content' => [
      '#type' => 'container',
      '#attributes' => ['class' => ['content-container']],
      'markup' => $block,
    ],
  ];
}

function _az_content_build_content_block($set) {
  $blockManager = \Drupal::service('plugin.manager.block');
  return $blockManager->createInstance('az_content_block', ['set' => _az_content_init_set($set)])->build();
}

function _az_content_add_group_logo($node, &$variables) {
  if ($gid = AzGroupQuery::inGroup($node)) {
    $group = \Drupal::entityManager()->getStorage('group')->load($gid);
    $variables['group_url'] = \Drupal::service('path.alias_manager')
      ->getAliasByPath('/group/' . $gid);
    $variables['group_label'] = $group->label->value;
    $file = \Drupal\file\Entity\File::load($group->field_logo_image->getValue()[0]['target_id']);
    $variables['group_logo_url'] = \Drupal\image\Entity\ImageStyle::load('300x100')
      ->buildUrl($file->getFileUri());
  }
}

function _az_content_has_new_content($variables) {
  // Add marker if content is New, Updated or has already been read.
  switch (node_mark($variables['node']->id(), $variables['node']->getChangedTime())) {
    case 0:
      $mark = '';
      break;
    case 1:
      $mark = 'New';
      break;
    case 2:
      $mark = 'Updated';
      break;
  };
  $variables['has_new_content'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['marker']],
    'label' => ['#markup' => $mark],
  ];
}

function _az_content_add_query_args($set) {
  $query = \Drupal::request()->query->all();
  foreach ($query as $key => $arg) {
    if (\Drupal::currentUser()->hasPermission('az content query args') ||
        in_array($key, ['pageNumItems', 'pageNum', 'view_mode']) ||
        in_array($key, (isset($set['args'])) ? $set['args'] : [])) {
      $parts = explode(',', $arg);
      $set[$key] = (count($parts) == 1) ? $parts[0] : $parts;
    }
  }
  return $set;
}

/**
 * Create the set array - merge $set with default settings.
 *
 * @param $set
 * @return array
 */
function _az_content_init_set($set) {
  $set += [
    'id' => 'init-stream',
    'types' => ['article', 'event', 'book', 'news', 'glossary'],
    'more' => 'ajax',
//  'getTotalRows' => TRUE,
    'entityType' => 'node',
    'pageNum' => 0,
    'pageNumItems' => 10,
    'empty' => 'No content found',
  ];
  $set = _az_content_add_query_args($set);

  // Unset any settings that == 'UNSET'
  foreach ($set as $key => $setting) {
    if ($setting === 'UNSET') {
      unset($set[$key]);
    }
  }

  return $set;
}

/**
 * Implements HOOK_preprocess_node().
 *
 * @param $variables
 */
function az_content_preprocess_node(&$variables) {
  // Add marker if content is New, Updated or has already been read.
  $node = $variables['node'];
  $type = $node->getType();
  $view_mode = $variables['view_mode'];
  
  $az_wysiwyg = &drupal_static('az_wysiwyg', []);
  $az_wysiwyg = [  // The wysiwyug filter needs this information.
    'node' => $node,
    'view_mode' => $view_mode
  ];

  $variables['bundle_name'] = $node->type->entity->label();

  if ($view_mode == 'full' || $view_mode == 'teaser') {
    $variables['has_new_content'] = _az_content_has_new_content($variables);
  }

  // Use Changed time to format date and ago.
  $changed = $node->getChangedTime();
  $variables['changed'] = \Drupal::service('date.formatter')->format($changed);
  $variables['changed_ago'] = \Drupal::service('date.formatter')->formatDiff(
    $changed, REQUEST_TIME, ['granularity' => 2, 'return_as_object' => TRUE]
  );

  // Get the status and moderation_state
  $variables['status'] = $node->status->value;
  if ($node->hasField('moderation_state')) {
    $variables['moderation_state'] = $node->moderation_state->value;
  }

  switch ($type) {
    case 'article':
    case 'book':
    case 'news':
    case 'page':
    case 'event':
    case 'ticket':
    case 'glossary':

      if ($view_mode == 'teaser') {
        _az_content_add_group_logo($node, $variables);
      }

      if ($view_mode == 'full') {

        // Add block showing any tickets submitted for this page.
        if (\Drupal::currentUser()->hasPermission('az content view tickets')) {
          $variables['sidebar']['tickets'] = _az_content_build_content_block([
            'id' => 'related-tickets',
            'title' => 'Tickets',
            'viewMode' => 'teaser_short',
            'types' => 'ticket',
            'pages' => $node->id(),
            'class' => 'block-sidebar',
            'empty' => 'NO DISPLAY',
          ]);
        }

        if (in_array($type, ['article', 'news', 'book'])) {

          // Create book navigation block
          $block_entity = Drupal\block\Entity\Block::load('azbooknavigation');
          $variables['sidebar']['block_booknavigation'] = \Drupal::entityTypeManager()
            ->getViewBuilder('block')
            ->view($block_entity);

        }

        // If field_contribute has content - add contribute block
        if ($node->hasField('field_contribute') && !$node->field_contribute->isEmpty()) {
          $block_entity = Drupal\block\Entity\Block::load('azcontributeblock');
          $variables['sidebar']['block_contribute'] = \Drupal::entityTypeManager()
            ->getViewBuilder('block')
            ->view($block_entity);
        }

        // If field_display_image_map has a value then add the map views map block.
        if ($node->hasField('field_display_image_map') && !$node->field_display_image_map->isEmpty()) {
          $block_entity = Drupal\block\Entity\Block::load('views_block__az_media_block_map_usage');
          $variables['sidebar']['block_views_image_map'] = \Drupal::entityTypeManager()
            ->getViewBuilder('block')
            ->view($block_entity);
        }

        // Create sidebar block of recent activity for the same topic.
        $tids = null;
        if ($type == 'glossary') {
          $tids = $node->id();
        } else {
          if ($node->hasField('field_topics')) {
            foreach ($node->field_topics->getValue() as $topic) {
              $tids[] = $topic['target_id'];
            };
          }
        }
        if (!empty($tids)) {
          $variables['sidebar']['related_content'] = _az_content_build_content_block([
            'id' => 'related-content',
            'status' => NODE_PUBLISHED,
            'title' => 'Related Content',
            'viewMode' => 'teaser_short',
            'exclude' => $node->id(),
            'topics' => $tids,
            'class' => 'block-sidebar',
            'empty' => 'NO DISPLAY'
          ]);
        }

        // Add the Donate block.
        $block_entity = Drupal\block\Entity\Block::load('azdonateblock');
        $variables['sidebar']['block_donate'] =
          \Drupal::entityTypeManager()->getViewBuilder('block')->view($block_entity);
      }
      break;

    case 'landing_page':

      // Dashboard - Front page
      if (\Drupal::service('path.matcher')->isFrontPage()) {
        $uid = \Drupal::currentUser()->id();
        $user = User::load($uid);

        // Create Announcement block at top of page
        if ($node->hasField('field_announcement')) {
          $nid = $node->field_announcement->getValue()[0]['target_id'];
          $snippet = \Drupal::entityManager()->getStorage('node')->load($nid);
          $variables['section_announcement'] = \Drupal::entityTypeManager()->getViewBuilder('node')->view($snippet, 'full');
        }

        // Create Recent Activity tab
        $activity = _az_content_build_content_block([
          'id' => 'recent-activity',
          'tab' => 'Activity',
          'types' => ['article', 'event', 'book', 'news'],
          'title' => 'Recent Activity',
          'status' => NODE_PUBLISHED,
          'empty' => 'No activity for this site',
        ]);

        // Create Recent Comments tab
        $comments = _az_content_build_content_block([
          'id' => 'recent-comments',
          'tab' => 'Comments',
          'title' => 'Recent Comments',
          'entityType' => 'comment',
          'types' => 'UNSET',
          'empty' => 'You currently have no comments',
        ]);

        // If the user is logged in then create the My Activity, My Comments and My Media tabs
        if ($uid != 0) {

          // Create the user block in the upper left corner.
          $variables['user_id'] = $user->id();
          $variables['user_name'] = $user->name->value;
          $picture = $user->field_picture->getValue();
          if ($user->field_picture->isEmpty()) {
            $field = \Drupal\field\Entity\FieldConfig::loadByName('user', 'user', 'field_picture');
            $default_image = $field->getSetting('default_image');
            $file = \Drupal::entityManager()->loadEntityByUuid('file', $default_image['uuid']);
          } else {
            $file = \Drupal\file\Entity\File::load($picture[0]['target_id']);
          }


          $variables['user_picture_url'] = \Drupal\image\Entity\ImageStyle::load('thumbnail')->buildUrl($file->getFileUri());

          $variables['view_my_groups'] = views_embed_view('az_my_groups', 'user_block');

          if (AccessResult::allowedIfHasPermission($user, 'view any unpublished content')) {
            // Create Unpublished Activity tab
            $unpublished = _az_content_build_content_block([
              'id' => 'unpublished-activity',
              'tab' => 'Unpublished',
              'title' => 'Unpublished Activity',
              'status' => NODE_NOT_PUBLISHED,
              'empty' => 'No unpublished activity for this site',
            ]);
          }

          if (\Drupal::currentUser()->hasPermission('az content view tickets')) {
            $tickets = _az_content_build_content_block([
              'id' => 'tickets',
              'tab' => 'Tickets',
              'title' => 'Tickets',
              'types' => 'ticket',
              'empty' => 'NO DISPLAY',
            ]);
          }

          // Create My Activity tab
          $my_activity = _az_content_build_content_block([
            'id' => 'my-activity',
            'tab' => 'My Activity',
            'title' => 'My Activity',
            'author' => $user->id(),
            'types' => 'UNSET',
            'empty' => 'You currently have no activity',
          ]);

          // Create Users Tickets tab
          $my_tickets = _az_content_build_content_block([
            'id' => 'tickets',
            'tab' => 'My Tickets',
            'author' => $user->id(),
            'title' => 'My Tickets',
            'types' => 'ticket',
            'empty' => 'NO DISPLAY',
          ]);

          // Create Users Tickets tab
          $my_assigned = _az_content_build_content_block([
            'id' => 'assigned',
            'tab' => 'My Assigned',
            'assigned' => $user->id(),
            'title' => 'My Assigned Tickets',
            'types' => 'ticket',
            'empty' => 'NO DISPLAY',
          ]);

          // Create My Comments tab
          $my_comments = _az_content_build_content_block([
            'id' => 'my-comments',
            'tab' => 'My Comments',
            'title' => 'My Comments',
            'entityType' => 'comment',
            'authorComment' => $user->id(),
            'types' => 'UNSET',
            'empty' => 'NO DISPLAY',
          ]);

        }
        else {
          $snippet = \Drupal::entityManager()->getStorage('node')->load(325);
          $dashboard_block = \Drupal::entityTypeManager()->getViewBuilder('node')->view($snippet, 'full');
        }

        $variables['tabs'] = [
          'activity'    => (isset($activity))    ? $activity    : null,
          'unpublished' => (isset($unpublished)) ? $unpublished : null,
          'tickets'     => (isset($tickets))     ? $tickets     : null,
          'comments'    => (isset($comments))    ? $comments    : null,
          'my_activity' => (isset($my_activity)) ? $my_activity : null,
          'my_comments' => (isset($my_comments)) ? $my_comments : null,
          'my_tickets'  => (isset($my_tickets))  ? $my_tickets  : null,
          'my_assigned' => (isset($my_assigned)) ? $my_assigned : null,
          'my_media'    => (isset($my_media))    ? $my_media    : null,
        ];

        $variables['sidebar'] = [
          'dashboard_block' => (isset($dashboard_block)) ? $dashboard_block : null,
        ];

        // Create sidebar donate block.
        $block_entity = Drupal\block\Entity\Block::load('azdonateblock');
        $variables['sidebar']['block_donate'] = \Drupal::entityTypeManager()->getViewBuilder('block')->view($block_entity);
      }
      break;
  }
}

/**
 * Alter the results of the particular embedded entity type build array.
 *
 * @param array &$build
 *   A renderable array representing the embedded entity content.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The embedded entity object.
 * @param array $context
 *   The context array.
 */
function az_content_entity_embed_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, array &$context) {
  if (!empty($build['entity']['#view_mode'])) {
    $build['#attributes']['class'][] = 'az-view-mode-' . str_replace('_', '-', $build['entity']['#view_mode']);
  }
}

/**
 * Implements HOOK_preprocess_ENTITY-TYPE().
 *
 * @param $variables
 */
function az_content_preprocess_media(&$variables) {
  $variables['attributes']['class'][] = 'az-view-mode-' . str_replace('_', '-', $variables['elements']['#view_mode']);
  return;
}

//////////////////////// Start entity_embed module api functions

/**
 * @addtogroup hooks
 * @{
 */

/**
 * Alter the Entity Embed Display plugin definitions.
 *
 * @param array &$info
 *   An associative array containing the plugin definitions keyed by plugin ID.
 */
function az_content_entity_embed_display_plugins_alter(array &$info) {
  return;
}

/**
 * Alter the Entity Embed Display plugin definitions for a given context.
 *
 * Usually used to remove certain Entity Embed Display plugins for specific
 * entities.
 *
 * @param array &$definitions
 *   Remove options from this list if they should not be available for the given
 *   context.
 * @param array $contexts
 *   The provided context, typically an entity.
 */
function az_content_entity_embed_display_plugins_for_context_alter(array &$definitions, array $contexts) {
  return;  // Return - testing this hook
  // Do nothing if no entity is provided.
  if (!isset($contexts['entity'])) {
    return;
  }
  $entity = $contexts['entity'];

  // For video and audio files, limit the available options to the media player.
  if ($entity instanceof \Drupal\file\FileInterface && in_array($entity->bundle(), ['audio', 'video'])) {
    $definitions = array_intersect_key($definitions, array_flip(['file:jwplayer_formatter']));
  }

  // For images, use the image formatter.
  if ($entity instanceof \Drupal\file\FileInterface && in_array($entity->bundle(), ['image'])) {
    $definitions = array_intersect_key($definitions, array_flip(['image:image']));
  }

  // For nodes, use the default option.
  if ($entity instanceof \Drupal\node\NodeInterface) {
    $definitions = array_intersect_key($definitions, array_flip(['entity_reference:entity_reference_entity_view']));
  }
}

/**
 * Alter the context of an embedded entity before it is rendered.
 *
 * @param array &$context
 *   The context array.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 */
function az_content_entity_embed_context_alter(array &$context, \Drupal\Core\Entity\EntityInterface $entity) {
  return;
}

/**
 * Alter the context of an particular embedded entity type before it is rendered.
 *
 * @param array &$context
 *   The context array.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 */
function az_content_node_embed_context_alter(array &$context, \Drupal\Core\Entity\EntityInterface $entity) {
  return;
}

