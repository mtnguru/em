<?php

/**
 * @file
 * Contains az_content.module.
 */

use Drupal\az_groups\azGroupQuery;
use Drupal\comment\Entity\Comment;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\Random;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_alter().
 */
function az_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  return;
}

/**
 * Implements hook_form_alter().
 */
function az_content_entity_embed_dialog_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  return;
  /*
  // Couldn't get this to work - How do I save my new settings?
  // Decided to move entity_embed from modules/contrib to modules/custom and customize it there.
  $form['attributes']['azz-class'] = array(
    '#title' => t('Class Name'),
    '#type' => 'textfield',
    '#default_value' => isset($entity_element['azz-class']) ? Html::decodeEntities($entity_element['azz-class']) : '',
//  '#element_validate' => array('::escapeValue'),
  );

  // James Sorensen - added azz data attribute
  $form['attributes']['azz-data'] = array(
    '#title' => t('Data field'),
    '#desc' => t('Used to pass Key/Value pairs into JavaScript - Ex: key-value'),
    '#type' => 'textfield',
    '#default_value' => isset($entity_element['azz-data']) ? Html::decodeEntities($entity_element['azz-data']) : '',
//  '#element_validate' => array('::escapeValue'),
  );
  $form['#validate'][] = '_az_content_embed_validate';
  $form['actions']['submit']['#submit'][] = '_az_content_embed_submit';
  */
}

function az_content_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form['panelizer'])) {
    if (!empty($form['panelizer']['widget']['0']['default']['#title'])) {
      $form['panelizer']['widget']['0']['default']['#title'] = t('Page Display Format');
    }
  }
  return;
}
function az_content_form_node_book_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  return;
}

function _az_content_embed_validate($form, FormStateInterface $form_state) {
  return;
}

function _az_content_embed_submit($form, FormStateInterface &$form_state) {
/*  $entity_element = $form_state->get('entity_element');

    $entity_element += [
      'az-data' => $form_state->get('az-data'_embed_button->getTypeSetting('entity_type'),
      'data-entity-uuid' => '',
      'data-entity-embed-display' => 'entity_reference:entity_reference_entity_view',
      'data-entity-embed-display-settings' => isset($form_state->get('entity_element')['data-entity-embed-settings']) ? $form_state->get('entity_element')['data-entity-embed-settings'] : [],
    ];

    $form_state->set('entity_element', $entity_element);
*/
  return;
}

/**
 * Implements hook_node_presave().
 */
function az_content_node_presave(Node $node) {
  if  ($node->getType() == 'article' || $node->getType() == 'book') {

    // If this page belongs to a book, and the book is in a group, create group content reference.
    if (5) {

    }

    // If there is a primary image add reference back to the page.
    if ($node->hasField('field_media')) {
      $mediaRef = $node->field_media;
      $value = $mediaRef->getValue();
      if (!empty($value[0])) {
        $media = \Drupal::entityManager()->getStorage('media')->load($value[0]['target_id']);
        if ($media != null) {
          _az_content_add_node_to_media($media, $node->id());
        }
      }
    }

    // Find media in body and create reference back to the page.
    $bodyValue = $node->get('body')->getValue();
    if (!empty($bodyValue[0])) {
      preg_match_all("/data-entity-uuid=\".*?\"/", $bodyValue[0]['value'], $matches);
      foreach($matches[0] as $match) {
        $uuid = explode('"', $match)[1];
        $media = \Drupal::entityManager()->loadEntityByUuid('media', $uuid);
        if ($media != null) {
          _az_content_add_node_to_media($media, $node->id());
        }
      }
    }
  }
  return;
}

/**
 * Implements HOOK_entity_presave().
 *
 */
function az_content_entity_presave(EntityInterface $entity) {
  return;
}

/**
 * Implement HOOK_comment_presave().
 *
 * @param \Drupal\comment\Entity\Comment $comment
 */
function az_content_comment_presave(Comment $comment) {
  $articleId = $comment->get('entity_id')->getValue()[0]['target_id'];
  $bodyRef = $comment->get('comment_body');
  $bodyValue = $bodyRef->getValue();
  if (!empty($bodyValue[0])) {
    preg_match_all("/data-entity-uuid=\".*?\"/", $bodyValue[0]['value'], $matches);
    foreach($matches[0] as $match) {
      $uuid = explode('"', $match)[1];
      $media = \Drupal::entityManager()->loadEntityByUuid('media', $uuid);
      _az_content_add_node_to_media($media, $articleId);
    }
  }
  return;
}

/**
 * Implements HOOK_media_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function az_content_media_presave(EntityInterface $entity) {
  return;
}

/**
 * Implements HOOK_file_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function az_content_file_presave(EntityInterface $entity) {
  return;
}

/**
 * @param $group_content_entity
 * @param $entity
 */
function az_content_group_content_alter($group_content_entity, $entity) {
// Get the Group ID
// Get the Article ID
// Get the Media
//   for each media item
//     Add the article to the media
//     Add group to the media
//     Add topics - or should that come from the article
//$gid = $group_content_entity->gid->value;
//$media = $entity->get('field_media');
//return;
}

/**
 * Implements HOOK_preprocess_page().
 *
 * If this is the structuredatom.com and the user is not logged in then redirect
 * to the /under-construction.
 *
 * @param $variables
 */
function az_content_preprocess_page(&$variables) {

  if ($_SERVER['HTTP_HOST'] == 'atom' ||
      $_SERVER['HTTP_HOST'] == 'structuredatom.org' ||
      $_SERVER['HTTP_HOST'] == 'structuredatom.com') {
    if (\Drupal::currentUser()->isAnonymous() &&
        strstr($_SERVER['REQUEST_URI'], 'under-construction') == null  &&
        strstr($_SERVER['REQUEST_URI'], 'user/login') == null  &&
        strstr($_SERVER['REQUEST_URI'], 'user/password') == null) {
      drupal_set_message(t('The Structured Atom site is currently under construction ...'), 'status', TRUE);
      $response = new RedirectResponse('/under-construction');
      $response->send();
    }
  }
  return;
}

/**
 * Add a node reference to he media entitu field_articles field.
 *
 *
 * @param $media
 * @param $articleId
 */
function _az_content_add_node_to_media($media, $articleId) {
  $articles = $media->get('field_articles');
  $found = false;
  if (!empty($articles)) {
    $values = $articles->getValue();
    foreach ($values as $value) {
      if ($value['target_id'] == $articleId) {
        $found = TRUE;
      }
    }
  }
  if (!$found) {
    $media->field_articles->appendItem($articleId);
    $media->save();
  }
}

/**
 * Implements HOOK_preprocess_node().
 *
 * @param $variables
 */
function az_content_preprocess_node(&$variables) {
  // Add marker if content is New, Updated or has already been read.
  $node = $variables['node'];
  $view_mode = &drupal_static('az_view_mode');
  $view_mode = $variables['view_mode'];

  // Add marker if content is New, Updated or has already been read.
  switch (node_mark($variables['node']->id(), $variables['node']->getChangedTime())) {
    case 0: return;

//  case 0: $mark = 'Read'; break;
    case 1: $mark = 'New'; break;
    case 2: $mark = 'Updated'; break;
  };
  $variables['has_new_content'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['marker'],
    ],
    'label' => ['#markup' => $mark],
  ];

  switch ($node->getType()) {
    case 'article':
    case 'book':
    case 'page':

      // Add the views map showing locations of images
      if ($view_mode == 'map') {
        // Add view block if defined.
        $variables['content']['view_map_images'] = views_embed_view('az_media_block', 'block_media_map_article');
      }

      // Add the views map showing locations of images
      if ($view_mode == 'gallery') {
        // Add view block if defined.
        $variables['content']['view_image_gallery'] = views_embed_view('az_media_block', 'media_block_article');
      }

      // Add the New/Updated marker.
      if ($view_mode == 'main_content' || $view_mode == 'full' || $view_mode == 'teaser') {
        // Query to see if this content is in a group
        // if so load group and add to output.
        if ($gid = azGroupQuery::inGroup($node)) {
          $group = \Drupal::entityManager()->getStorage('group')->load($gid);
          $variables['content']['group_url'] = \Drupal::service('path.alias_manager')->getAliasByPath('/group/'.$gid);
          $variables['content']['group_label'] = $group->label->value;
        }

        $block_entity = Drupal\block\Entity\Block::load('azdonateblock');
        $variables['block_donate'] = \Drupal::entityTypeManager()->getViewBuilder('block')->view($block_entity);

        // Add has_new_content - New or Updated
        switch (node_mark($node->id(), $node->getChangedTime())) {
//  case 0: $mark = 'Read'; break;
          case 0: return;
          case 1: $mark = 'New'; break;
          case 2: $mark = 'Updated'; break;
        };
        $variables['has_new_content'] = [
          '#type' => 'container',
          '#attributes' => [
            'class' => ['marker'],
          ],
          'label' => ['#markup' => $mark],
        ];
      }

      break;
  }
}

/**
 * Alter the results of the particular embedded entity type build array.
 *
 * @param array &$build
 *   A renderable array representing the embedded entity content.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The embedded entity object.
 * @param array $context
 *   The context array.
 */
function az_content_entity_embed_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, array &$context) {
  if (!empty($build['entity']['#view_mode'])) {
    $build['#attributes']['class'][] = 'az-view-mode-' . str_replace('_', '-', $build['entity']['#view_mode']);
  }
}

/**
 * Implements HOOK_preprocess_ENTITY-TYPE().
 *
 * @param $variables
 */
function az_content_preprocess_media(&$variables) {
  $variables['attributes']['class'][] = 'az-view-mode-' . str_replace('_', '-', $variables['elements']['#view_mode']);
  return;
}

//////////////////////// Start entity_embed module api functions

/**
 * @addtogroup hooks
 * @{
 */

/**
 * Alter the Entity Embed Display plugin definitions.
 *
 * @param array &$info
 *   An associative array containing the plugin definitions keyed by plugin ID.
 */
function az_content_entity_embed_display_plugins_alter(array &$info) {
  return;
}

/**
 * Alter the Entity Embed Display plugin definitions for a given context.
 *
 * Usually used to remove certain Entity Embed Display plugins for specific
 * entities.
 *
 * @param array &$definitions
 *   Remove options from this list if they should not be available for the given
 *   context.
 * @param array $contexts
 *   The provided context, typically an entity.
 */
function az_content_entity_embed_display_plugins_for_context_alter(array &$definitions, array $contexts) {
  return;  // Return - testing this hook
  // Do nothing if no entity is provided.
  if (!isset($contexts['entity'])) {
    return;
  }
  $entity = $contexts['entity'];

  // For video and audio files, limit the available options to the media player.
  if ($entity instanceof \Drupal\file\FileInterface && in_array($entity->bundle(), ['audio', 'video'])) {
    $definitions = array_intersect_key($definitions, array_flip(['file:jwplayer_formatter']));
  }

  // For images, use the image formatter.
  if ($entity instanceof \Drupal\file\FileInterface && in_array($entity->bundle(), ['image'])) {
    $definitions = array_intersect_key($definitions, array_flip(['image:image']));
  }

  // For nodes, use the default option.
  if ($entity instanceof \Drupal\node\NodeInterface) {
    $definitions = array_intersect_key($definitions, array_flip(['entity_reference:entity_reference_entity_view']));
  }
}

/**
 * Alter the context of an embedded entity before it is rendered.
 *
 * @param array &$context
 *   The context array.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 */
function az_content_entity_embed_context_alter(array &$context, \Drupal\Core\Entity\EntityInterface $entity) {
  return;
}

/**
 * Alter the context of an particular embedded entity type before it is rendered.
 *
 * @param array &$context
 *   The context array.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 */
function az_content_node_embed_context_alter(array &$context, \Drupal\Core\Entity\EntityInterface $entity) {
  return;
}

