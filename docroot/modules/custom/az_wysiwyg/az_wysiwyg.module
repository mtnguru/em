<?php

/**
 * @file
 * This file contains the hooks for Footmotes module.
 *
 * The Footnotes module is a filter that can be used to insert
 * automatically numbered az_wysiwyg into Drupal texts.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function az_wysiwyg_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.az_wysiwyg':
      return
        t('Insert automatically numbered az_wysiwyg using &lt;fn&gt; or [fn] tags. Enable the az_wysiwyg text filter @here',
          array('@here' => Drupal::l(t('here'), Url::fromRoute('filter.admin_overview')))
        );
  }
}

/**
 * Implements hook_theme().
 *
 * Thanks to emfabric for this implementation. http://drupal.org/node/221156
 */
function az_wysiwyg_theme() {
  return array(
    'footnote_link' => array(
      'render element' => 'fn',
      'function' => 'theme_footnote_link',
    ),
    'footnote_list' => array(
      'render element' => 'az_wysiwyg',
      'function' => 'theme_footnote_list',
    ),
  );
}

/**
 * Themed output of a footnote link appearing in the text body.
 *
 * Accepts a single associative array, containing values on the following keys:
 *   text       - the raw unprocessed text extracted from within the [fn] tag
 *   text_clean - a sanitized version of the previous, may be used as HTML
 *                attribute value
 *   value      - the raw unprocessed footnote number or other identifying label
 *   fn_id      - the globally unique identifier for the in-body footnote link
 *                anchor, used to allow links from the list to the body.
 *   ref_id     - the globally unique identifier for the footnote's anchor in
 *                the footnote listing, used to allow links to the list from the
 *                body.
 */
function theme_footnote_link($fn) {
  // Drupal 8 needs the use of render arrays, the array como as this ugly,
  // maybe latter fix this, but for now it works.
  // @todo: change this ugly array for arguments in the function.
  $fn = $fn['fn']['fn'];
  return '<a class="see-footnote" id="' . $fn['ref_id'] .
         '" title="' . $fn['text_clean'] . '" href="#' . $fn['fn_id'] . '">' .
         $fn['value'] . '</a>';
}

/**
 * Themed output of the az_wysiwyg list appearing at at [az_wysiwyg].
 *
 * Accepts an array containing an ordered listing of associative arrays, each
 * containing values on the following keys:
 *   text   - the raw unprocessed text extracted from within the [fn] tag
 *   text_clean   - a sanitized version of the previous, may be used as HTML
 *                  attribute value
 *   value  - the raw unprocessed footnote number or other identifying label
 *   fn_id  - the globally unique identifier for the in-body footnote link
 *            anchor, used to allow links from the list to the body
 *   ref_id - the globally unique identifier for the footnote's anchor in the
 *            footnote listing, used to allow links to the list from the body.
 */
function theme_footnote_list($az_wysiwyg) {
  // Drupal 8 needs the use of render arrays, the array as this ugly,
  // maybe latter fix this, but for now it works.
  // @todo: change this ugly array for arguments in the function.
  $az_wysiwyg = $az_wysiwyg['az_wysiwyg']['#az_wysiwyg'];
  $str = '<ul class="az_wysiwyg">';
  // Drupal 7 requires we use "render element" which just introduces a wrapper
  // around the old array.
  // $az_wysiwyg = $az_wysiwyg['az_wysiwyg'];
  // loop through the az_wysiwyg.
  foreach ($az_wysiwyg as $fn) {
    if (!is_array($fn['ref_id'])) {
      // Output normal footnote.
      $str .= '<li class="footnote" id="' . $fn['fn_id'] . '"><a class="footnote-label" href="#' . $fn['ref_id'] . '">' . $fn['value'] . '.</a> ';
      $str .= $fn['text'] . "</li>\n";
    }
    else {
      // Output footnote that has more than one reference to it in the body.
      // The only difference is to insert backlinks to all references.
      // Helper: we need to enumerate a, b, c...
      $abc = str_split("abcdefghijklmnopqrstuvwxyz"); $i = 0;

      $str .= '<li class="footnote" id="' . $fn['fn_id'] . '"><a href="#' . $fn['ref_id'][0] . '" class="footnote-label">' . $fn['value'] . '.</a> ';
      foreach ($fn['ref_id'] as $ref) {
        $str .= '<a class="footnote-multi" href="#' . $ref . '">' . $abc[$i] . '.</a> ';
        $i++;
      }
      $str .= $fn['text'] . "</li>\n";
    }
  }
  $str .= "</ul>\n";
  return $str;
}

/**
 * Helper for other filters, check if Footnotes is present in your filter chain.
 *
 * Note: Due to changes in Filter API, the arguments to this function have
 * changed in Drupal 7.
 *
 * Other filters may leverage the Footnotes functionality in a simple way:
 * by outputting markup with <fn>...</fn> tags within.
 *
 * This creates a dependency, the Footnotes filter must be present later in
 * "Input format". By calling this helper function the other filters that
 * depend on Footnotes may check whether Footnotes is present later in the chain
 * of filters in the current Input format.
 *
 * If this function returns true, the caller may depend on Footnotes. Function
 * returns false if caller may not depend on Footnotes.
 *
 * You should also put "dependencies = az_wysiwyg" in your module.info file.
 *
 * Example usage:
 * <code>
 * _filter_example_process( $text, $filter, $format ) {
 *   ...
 *   if(az_wysiwyg_is_az_wysiwyg_later($format, $filter)) {
 *     //output markup which may include [fn] tags
 *   }
 *   else {
 *     // must make do without az_wysiwyg features
 *     // can also emit warning/error that user should install and configure
 *     // az_wysiwyg module
 *   }
 *   ...
 * }
 * </code>
 *
 * @param object $format
 *    The text format object caller is part of.
 * @param object $caller_filter
 *    The filter object representing the caller (in this text format).
 *
 * @return True
 *    If Footnotes is present after $caller in $format.
 */
function az_wysiwyg_is_az_wysiwyg_later($format, $caller_filter) {
  return $format['filter_az_wysiwyg']['weight'] > $caller_filter['weight'];
}




/**
 * Implements hook_theme().
 */
function az_wysiwyg_theme() {
  return [
    'az_wysiwyg_tooltip' => [
      'variables' => ['word' => NULL, 'tip' => NULL],
    ],
    'az_wysiwyg_link' => [
      'variables' => ['word' => NULL, 'tip' => NULL, 'tipurl' => NULL],
    ],
  ];
}

/**
 * {@inheritdoc}
 */
function _az_wysiwyg_process_text($text, &$matched) {

  $terms = [];

  // Query for topics taxonomy term data.
  $query = \Drupal::database()->select('taxonomy_term_field_data', 'tfd');
  $query->addfield('tfd', 'tid', 'id');
  $query->addfield('tfd', 'name');
  $query->addfield('tfd', 'name', 'name_norm');
  $query->addField('tfd', 'description__value', 'description');
  $query->condition('tfd.vid', 'topics', 'IN');

  $query->leftjoin('taxonomy_term__field_include_in_glossary', 'tfg', 'tfg.entity_id = tfd.tid');
  $query->addField('tfg', 'field_include_in_glossary_value', 'in_glossary');
  $query->condition('tfg.field_include_in_glossary_value', '1');

  $query->leftjoin('taxonomy_term__field_tooltip', 'tft', 'tft.entity_id = tfd.tid' );
  $query->addField('tft', 'field_tooltip_value', 'tooltip');

  $results = $query->execute()->fetchAllAssoc('name_norm');
  // Build terms array.
  foreach ($results as $result) {
    // Make name_norm lowercase, it seems not possible in PDO query?
    $result->name_norm = strtolower($result->name_norm);
    $terms[$result->name_norm] = $result;
  }

  // Process text.
  if (count($terms) > 0) {
    $text = GlossifyBase::parseTooltipMatch(
      $text,
      $terms,
      false,  // case sensitivity
      true,  // first only
      'tooltips_links',
      '/taxonomy/term/[id]',
      $matched
    );
  }
  return $text;
}

function _az_wysiwyg_add_topics(&$node, $matched) {
  $tids = $node->field_topics->getValue();
  foreach ($matched as $name => $tid) {
    $found = false;
    foreach ($tids as $i => $val) {
      if ($val['target_id'] == $tid) {
        $found = true;
      }
    }
    if (!$found) {
      $node->field_topics->appendItem($tid);
    }
  }
}

function az_wysiwyg_node_presave(EntityInterface $node) {

  $type = $node->getType();
  $matched = [];
  if ($type == 'article') {
    $text = $node->field_body->value;
    $newText = _az_wysiwyg_process_text($text, $matched);
    $node->field_body->setValue([
      'value' => $newText,
      'format' => 'full_html'
    ]);
  }
  if ($type == 'page') {
    $sections = $node->field_sections->getValue();
    foreach($sections as $section){
      foreach($section['subform']['field_subsections'] as $subsection) {
        if (!empty($subsection['subform'])) {
          $text = $subsection['subform']['field_body'][0]['value'];
          $newText = _az_wysiwyg_process_text($text, $matched);
          $subsection['subform']['field_body'][0]['value'] = $newText;
        }
      }
    }
    $node->field_sections->setValue($sections);
  }
  _az_wysiwyg_add_topics($node, $matched);

  return;
}

