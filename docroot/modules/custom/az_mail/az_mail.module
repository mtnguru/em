<?php

/**
 * @file
 * Contains az_mail.module.
 * Handles all emailing of notifications to users of new content and group emails.
 * Article Insert
 */
use Drupal\az_user\CreateUserList;
use Drupal\comment\Entity\Comment;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements HOOK_mail().
 */
function az_mail_mail($key, &$message, $params) {
  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    // Send a simple message from the contact form.
    case 'contact_message':
      $message['subject'] = $params['subject'];
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = SafeMarkup::checkPlain($params['message']);

      // Note that the message body is an array, not a string.
//    $account = \Drupal::currentUser();
//    $message['body'][] = t('@name sent you the following message:', ['@name' => $account->getUsername()], $options);
      $from = \Drupal::config('system.site')->get('mail');
      $message['body'][] = t('E-mail sent from @site-name', ['@site-name' => $from], $options);

      break;
    case 'email_presave':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
//    $message['body'][] = SafeMarkup::checkPlain($params['message']);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_mail_alter().
 *
 * This function is not required to send an email using Drupal's mail system.
 *
 * hook_mail_alter() provides an interface to alter any aspect of email sent by
 * Drupal. You can use this hook to add a common site footer to all outgoing
 * email, add extra header fields, and/or modify the email in anyway. HTML-izing
 * the outgoing email is one possibility.
 */
function az_mail_mail_alter(&$message) {
  // For the purpose of this example, modify all the outgoing messages and
  // attach a site signature. The signature will be translated to the language
  // in which message was built.
  $options = [
    'langcode' => $message['langcode'],
  ];

//$signature = t('<div>Mail sent from <a href="realscience.rocks">RealScience.Rocks</a></div>', [], $options);
  $signature = '<div>Mail sent from <a href="realscience.rocks">RealScience.Rocks</a></div>';
  if (is_array($message['body'])) {
    $message['body'][] = $signature;
  }
  else {
    // Some modules use the body as a string, erroneously.
    $message['body'] .= $signature;
  }
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
}

/**
 * Implements hook_entity_insert().
 */
function az_mail_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {

}

/**
 * Implements HOOK_node_presave().
 **/
function az_mail_node_presave(Node $node) {
  if ($node->getEntityTypeId() !== 'node' || $node->bundle() !== 'e_mail') return;

  $mailManager = \Drupal::service('plugin.manager.mail');

  $set = ['email_new_content' => 'immediate'];
  if ($values = $node->field_roles->getValue()) {
    foreach ($values as $value) {
      $set['role'][] = $value['target_id'];
    }
  }
  if ($values = $node->field_groups->getValue()) {
    foreach ($values as $value) {
      $set['group_member'][] = $value['target_id'];
    }
  }
  if ($values = $node->field_group_role->getValue()) {
    foreach ($values as $value) {
      $set['qroup_role'][] = $value['target_id'];
    }
  }

  $recipients = CreateUserList::queryUsers($set);

  $params['message'] = $node->get('body')->value;
  $params['subject'] = $node->title->value;

  foreach ($recipients as $recipient) {
    $result = $mailManager->mail(
      'az_mail',
      'email_presave',
      $recipient->mail,
      \Drupal::currentUser()->getPreferredLangcode(),
      $params,
      NULL,
      true);

    // Send to current user.
    if ($result['result'] !== true) {
      $message = t('There was a problem sending your email notification to @email for creating node @id.', array('@email' => $recipient->mail, '@id' => $node->id()));
      drupal_set_message($message, 'error');
      \Drupal::logger('az_mail')->error($message);
      continue;
    }

    $message = t('An email has been sent to @email - email node id @id.', array('@email' => $recipient->mail, '@id' => $node->id()));
    drupal_set_message($message);
    \Drupal::logger('az_mail')->notice($message);
  }
  return;
}

/**
 * Implements HOOK_entity_presave().
 *
 */
function az_mail_entity_presave(EntityInterface $entity) {
  return;
}

/**
 * Implement HOOK_comment_presave().
 *
 * @param \Drupal\comment\Entity\Comment $comment
 */
function az_mail_comment_presave(Comment $comment) {
  $articleId = $comment->get('entity_id')->getValue()[0]['target_id'];
  $bodyRef = $comment->get('comment_body');
  return;
}

/**
 * Implements HOOK_media_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function az_mail_media_presave(EntityInterface $entity) {
  return;
}

/**
 * Implements HOOK_file_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function az_mail_file_presave(EntityInterface $entity) {
  return;
}


