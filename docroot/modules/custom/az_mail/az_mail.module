<?php

/**
 * @file
 * Contains az_mail.module.
 * Handles all emailing of notifications to users of new content and group emails.
 * Article Insert
 */
use Drupal\az_user\CreateUserList;
use Drupal\comment\Entity\Comment;
use Drupal\Component\Render\HtmlEscapedText;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element\Html;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\RedirectResponse;

function _az_mail_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  return;
}

function _az_mail_email_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove site roles from list of roles - Leave group roles.
  foreach ($form['field_group_roles']['widget']['#options'] as $key => $option) {
    if ($key == 'theories-administrator' ||
        $key == 'theories-anonymous' ||
        preg_match('/\\d/', $key) > 0 ) {   // look for keys with digits - they are site roles
      unset($form['field_group_roles']['widget']['#options'][$key]);
    }
  }

  // Set send email on save to false.
  $form['field_send_email']['widget']['value']['#default_value'] = false;
/*$form['send_email'] = [
    '#type' => 'checkbox',
    '#title' => 'Send email on save',
    '#default_value' => false,
    '#weight' => 10,
  ]; */

  $form['actions']['submit']['#submit'][] = '_az_mail_node_submit';
}

function az_mail_form_node_email_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _az_mail_email_form_alter($form, $form_state, $form_id);
}

function az_mail_form_node_email_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _az_mail_email_form_alter($form, $form_state, $form_id);
}

function _az_mail_node_submit(&$form, FormStateInterface $form_state) {
  return;
}
/**
 * Implements HOOK_mail().
 */
function az_mail_mail($key, &$message, $params) {
  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.

  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    // Send a simple message from the contact form.
    case 'contact_message':
      $message['subject'] = $params['subject'];
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
//    $message['body'][] = SafeMarkup::checkPlain($params['message']);
//    $message['body'][] = HtmlEscapedText(params['message']);
      $message['body'][] = $params['message'];

      // Note that the message body is an array, not a string.
//    $account = \Drupal::currentUser();
//    $message['body'][] = t('@name sent you the following message:', ['@name' => $account->getUsername()], $options);
      $from = \Drupal::config('system.site')->get('mail');
      $message['body'][] = t('E-mail sent from @site-name', ['@site-name' => $from], $options);

      break;
    case 'email_presave':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Ethereal Matters Update: @title', array('@title' => $params['title']), $options);
      $message['body'][] = Html::escape($params['message']);
//    $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_mail_alter().
 *
 * This function is not required to send an email using Drupal's mail system.
 *
 * hook_mail_alter() provides an interface to alter any aspect of email sent by
 * Drupal. You can use this hook to add a common site footer to all outgoing
 * email, add extra header fields, and/or modify the email in anyway. HTML-izing
 * the outgoing email is one possibility.
 */
function az_mail_mail_alter(&$message) {
  // For the purpose of this example, modify all the outgoing messages and
  // attach a site signature. The signature will be translated to the language
  // in which message was built.

  return;

  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

//$options = [
//  'langcode' => $message['langcode'],
//];

  $signature = '<div>Mail sent from <a href="https://etherealmatters.org">Ethereal Matters</a></div>';

//$body = new HtmlEscapedText($signature);
  $body = $signature;
  if (is_array($message['body'])) {
    $message['body'][] = $body;
  }
  else {
    // Some modules use the body as a string, erroneously.
    $message['body'] .= $signature;
  }
}

/**
 * Implements hook_entity_insert().
 */
function az_mail_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {

}

/**
 * Implements HOOK_node_presave().
 **/
function az_mail_node_presave(Node $node) {
  if ($node->getEntityTypeId() !== 'node' || $node->bundle() !== 'email') return;

  $mailManager = \Drupal::service('plugin.manager.mail');

  $set = ['email_new_content' => 'immediate'];
  if ($values = $node->field_roles->getValue()) {
    foreach ($values as $value) {
      $set['role'][] = $value['target_id'];
    }
  }
  if ($values = $node->field_groups->getValue()) {
    foreach ($values as $value) {
      $set['group_member'][] = $value['target_id'];
    }
  }
  if ($values = $node->field_group_roles->getValue()) {
    foreach ($values as $value) {
      $set['group_role'][] = $value['target_id'];
    }
  }

  $recipients = CreateUserList::queryUsers($set);

  $params['subject'] = $node->title->value;

  $mailit = $node->field_send_email->value;
  if ($mailit) {
    $fullmessage = "Sending mail to the following:\n";
  } else {
    $fullmessage = "No mail will be sent - mailing list:\n";
  }
  drupal_set_message($fullmessage);
  $n = 0;
  foreach ($recipients as $recipient) {
    $n++;
    $message = '';
    $user = \Drupal\user\Entity\User::load($recipient->uid);
    $resetlink = '<a href="' . user_pass_reset_url($user) . '">by clicking here</a>';
    $body = $node->get('body')->value;
    $body = preg_replace('/\$username/', $recipient->name, $body);
    $body = preg_replace('/\$firstname/', $user->field_first_name->value, $body);
    $body = preg_replace('/\$user_reset/', $resetlink, $body);
//  $params['message'] = new HtmlEscapedText($body);
    $params['message'] = $body;

    if ($mailit) {
      $result = $mailManager->mail(
        'az_mail',
        'email_presave',
        $recipient->mail,
        \Drupal::currentUser()->getPreferredLangcode(),
        $params,
        NULL,
        true);
      if ($result['result'] !== true) {
        $message = 'Failed - ';
      } else {
        $message = 'Success - ';
      }
    }
    $message .= t('@n @name - @email - @id', [
        '@n' => $n,
        '@name' => $recipient->name,
        '@email' => $recipient->mail,
        '@id' => $recipient->uid]) . "\n";
    drupal_set_message($message);
    $fullmessage .= $message;
  }

  \Drupal::logger('az_mail')->notice($fullmessage);
  return;
}

/**
 * Implements HOOK_entity_presave().
 *
 */
function az_mail_entity_presave(EntityInterface $entity) {
  return;
}

/**
 * Implement HOOK_comment_presave().
 *
 * @param \Drupal\comment\Entity\Comment $comment
 */
function az_mail_comment_presave(Comment $comment) {
  $articleId = $comment->get('entity_id')->getValue()[0]['target_id'];
  $bodyRef = $comment->get('comment_body');
  return;
}

/**
 * Implements HOOK_media_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function az_mail_media_presave(EntityInterface $entity) {
  return;
}

/**
 * Implements HOOK_file_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function az_mail_file_presave(EntityInterface $entity) {
  return;
}


